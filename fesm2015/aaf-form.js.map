{"version":3,"file":"aaf-form.js.map","sources":["ng://aaf-form/lib/aaf-form.service.ts","ng://aaf-form/lib/form-fields-factory.ts","ng://aaf-form/lib/default-configuration.ts","ng://aaf-form/lib/aaf-form-fields/select/select.component.ts","ng://aaf-form/lib/aaf-form.component.ts","ng://aaf-form/lib/material.module.ts","ng://aaf-form/lib/aaf-form-fields/input/input.component.ts","ng://aaf-form/lib/aaf-form-fields/button/button.component.ts","ng://aaf-form/lib/aaf-form-fields/date/date.component.ts","ng://aaf-form/lib/aaf-form-fields/radiobutton/radiobutton.component.ts","ng://aaf-form/lib/aaf-form-fields/checkbox/checkbox.component.ts","ng://aaf-form/lib/aaf-form-field.directive.ts","ng://aaf-form/lib/aaf-form.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AafFormService {\n\n  constructor() { }\n}\n","import { FieldConfig,FormDetails } from './field.interface';\r\nimport { Validators } from '@angular/forms';\r\n\r\nclass DefaultFormFields {\r\n\r\n    private regConfig: FieldConfig[];\r\n    private createUserForm:FormDetails;\r\n\r\n    constructor() {\r\n        \r\n    }\r\n    getFieldData() {\r\n        this.getDefaultFields();\r\n        this.getDefaultFormConfigs();\r\n        let fieldObj = { defaultFields: this.regConfig,defaultFormConfig:this.createUserForm };\r\n        return fieldObj;\r\n    }\r\n\r\n    getDefaultFormConfigs(){\r\n        this.createUserForm = {\r\n            name:'createUser',\r\n            class:'createUser'\r\n        }\r\n        return this.createUserForm;\r\n    }\r\n    getDefaultFields() {\r\n        this.regConfig = [\r\n            {\r\n                type: \"input\",\r\n                label: \"First name\",\r\n                inputType: \"text\",\r\n                name: \"fname\",\r\n                placeHolder: 'Name',\r\n                validations: [\r\n                    {\r\n                        name: \"required\",\r\n                        validator: Validators.required,\r\n                        message: \"First name is Required\"\r\n                    },\r\n                    {\r\n                        name: \"pattern\",\r\n                        validator: Validators.pattern(\"^[a-zA-Z]+$\"),\r\n                        message: \"Accept only text\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                type: \"date\",\r\n                label: \"Date Of Birth\",\r\n                name: \"dob\",\r\n                placeHolder: 'dd-mm-yy',\r\n                validations: [\r\n                    {\r\n                        name: \"required\",\r\n                        validator: Validators.required,\r\n                        message: \"Date of Birth is Required\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                type: \"input\",\r\n                label: \"Mobile Number\",\r\n                inputType: \"text\",\r\n                name: \"mobileno\",\r\n                placeHolder: 'Number',\r\n                validations: [\r\n                    {\r\n                        name: \"required\",\r\n                        validator: Validators.required,\r\n                        message: \"Mobile Number is Required\"\r\n                    },\r\n                    {\r\n                        name: \"pattern\",\r\n                        validator: Validators.pattern(\"^[0-9]+$\"),\r\n                        message: \"Accept only numbers\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                type: \"input\",\r\n                label: \"Last name\",\r\n                inputType: \"text\",\r\n                name: \"lname\",\r\n                placeHolder: 'Name',\r\n                validations: [\r\n                    {\r\n                        name: \"required\",\r\n                        validator: Validators.required,\r\n                        message: \"Last name is Required\"\r\n                    },\r\n                    {\r\n                        name: \"pattern\",\r\n                        validator: Validators.pattern(\"^[a-zA-Z]+$\"),\r\n                        message: \"Accept only text\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                type: \"select\",\r\n                label: \"Role\",\r\n                name: \"role\",\r\n                value: '',\r\n                options: [\r\n                    {\r\n                        label: 'Select',\r\n                        value: ''\r\n                    },\r\n                    {\r\n                        label: 'Admin',\r\n                        value: 'Admin'\r\n                    },\r\n                    {\r\n                        label: 'Agent',\r\n                        value: 'Agent'\r\n                    }\r\n                ],\r\n                validations: [\r\n                    {\r\n                        name: \"required\",\r\n                        validator: Validators.required,\r\n                        message: \"Role is Required\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                type: \"select\",\r\n                label: \"Primary Language\",\r\n                name: \"primarylanguage\",\r\n                value: '',\r\n                options: [\r\n                    {\r\n                        label: 'Select',\r\n                        value: ''\r\n                    },\r\n                    {\r\n                        label: 'Swahili',\r\n                        value: 'Swahili'\r\n                    }\r\n                ],\r\n                validations: [\r\n                    {\r\n                        name: \"required\",\r\n                        validator: Validators.required,\r\n                        message: \"Primary Language is Required\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                type: \"button\",\r\n                label: \"Create\"\r\n            }\r\n        ];\r\n        return this.regConfig;\r\n    }\r\n}\r\n\r\nexport function createDefaultField() {\r\n    return new DefaultFormFields();\r\n}\r\n","import { FormConfiguration } from './configuration.interface';\r\nimport * as defaultFields from './form-fields-factory';\r\n\r\nexport class DefaultFormConfiguration implements FormConfiguration {\r\n\r\n    getFormConfiguration() {\r\n        const defaultData = defaultFields.createDefaultField();\r\n        return defaultData.getFieldData();\r\n    }\r\n}","import { Component, EventEmitter, OnInit, Output, ViewChild } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { FieldConfig } from \"../../field.interface\";\r\nimport { MatOption } from '@angular/material';\r\n@Component({\r\n  selector: \"app-select\",\r\n  template: `\r\n<mat-form-field class=\"demo-full-width margin-top\" [formGroup]=\"group\" *ngIf=\"field.visibility\">\r\n<mat-select [placeholder]=\"field.label\" [formControlName]=\"field.name\" [required]=\"field.validations\" [multiple]=\"field.isMultiselect\">\r\n\r\n<ng-container *ngIf=\"field.isMultiselect;then multiSelectTemplate else simpleSelectTemplate\"></ng-container>\r\n<ng-template #multiSelectTemplate>\r\n<mat-option *ngIf=\"field.isMultiselect\" #allSelected (click)=\"toggleAllSelection()\" [value]=\"0\">All</mat-option>\r\n<mat-option (click)=\"tosslePerOne(allSelected.viewValue)\" *ngFor=\"let item of field.options\" [value]=\"item.value\">{{item.label}}</mat-option>\r\n</ng-template>\r\n<ng-template #simpleSelectTemplate>\r\n<mat-option *ngFor=\"let item of field.options\" [value]=\"item.value\">{{item.label}}</mat-option>\r\n</ng-template>\r\n</mat-select>\r\n<ng-container *ngFor=\"let validation of field.validations;\" ngProjectAs=\"mat-error\">\r\n<mat-error *ngIf=\"group.get(field.name).hasError(validation.name)\">{{validation.message}}</mat-error>\r\n</ng-container>\r\n</mat-form-field>  \r\n`,\r\n  styles: []\r\n})\r\nexport class SelectComponent implements OnInit {\r\n  field: FieldConfig;\r\n  group: FormGroup;\r\n  @ViewChild('allSelected') allSelected: MatOption;\r\n  constructor() { }\r\n  ngOnInit() { }\r\n\r\n  toggleAllSelection() {\r\n    if (this.allSelected.selected) {\r\n      this.group.get(this.field.name).patchValue([...this.field.options.map(item => item.value), 0]);\r\n    } else {\r\n      this.group.get(this.field.name).patchValue([]);\r\n    }\r\n  }\r\n  tosslePerOne(all) {\r\n    if(this.field.isMultiselect == false){\r\n      return true;\r\n    }\r\n    if (this.allSelected.selected) {\r\n      this.allSelected.deselect();\r\n      return false;\r\n    }\r\n    if (this.group.get(this.field.name).value.length == this.field.options.length)\r\n      this.allSelected.select();\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, OnChanges, SimpleChanges, SimpleChange, OnInit, Output, Inject, ViewChild } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators, FormControl } from \"@angular/forms\";\nimport { FieldConfig, Validator, FormDetails, EventsType, Events } from \"./field.interface\";\nimport { DefaultFormConfiguration } from './default-configuration';\n//import { Location, DOCUMENT } from '@angular/common';\nimport { SelectComponent } from './aaf-form-fields/select/select.component';\nimport { ActionsProvider } from './aaf-form-actions-provider';\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\n\n@Component({\n  selector: 'aaf-form',\n  template: `\n  <form [class]=\"formInfo.class\" [name]=\"formInfo.name\" [formGroup]=\"form\" (submit)=\"onSubmit($event)\">\n  <ng-container *ngFor=\"let field of deeplyClonedObject;\" aafFormField [field]=\"field\" [group]=\"form\">\n  </ng-container>\n  </form>\n  `,\n  styles: [],\n  providers: [DefaultFormConfiguration]\n})\nexport class AafFormComponent implements OnInit {\n\n  @Input() fields: FieldConfig[];\n  @Input() formInfo: FormDetails;\n  @Output() submit: EventEmitter<any> = new EventEmitter<any>();\n  @Input() actionProvider: ActionsProvider;\n\n  form: FormGroup;\n  listActions: any;\n  deeplyClonedObject: any;\n  initialEventsObj: Events[] = [];\n  onChangeEventsObj: Events[] = [];\n  @ViewChild(SelectComponent) formData: SelectComponent;\n\n  get value() {\n    return this.form.value;\n  }\n  constructor(\n    private fb: FormBuilder,\n    private defaultConfig: DefaultFormConfiguration,\n    //private _location: Location,\n    private ngxService: NgxUiLoaderService,\n    //@Inject(DOCUMENT) private document: Document\n  ) { }\n\n  changeToEmptyState(controlName) {\n    this.deeplyClonedObject.map((val, key) => {\n      if (val.name == controlName) {\n        this.deeplyClonedObject[key].options = [];\n        //this.deeplyClonedObject[key].options.push({ label: \"Select\", value: '' });\n      }\n    });\n  }\n  onChanges(formGroup: FormGroup): void {\n    if (this.onChangeEventsObj.length > 0) {\n      this.onChangeEventsObj.map((val, key) => {\n        this.form.get(val.source).valueChanges.subscribe(\n          changedValue => {\n            if (!val.changeType) {\n              if (val.dependent && val.dependent.length > 0) {\n                val.dependent.map(value => {\n                  this.changeToEmptyState(value);\n                });\n              }\n              if (changedValue != '') {\n                this.listActions[val.actionDataProvider](changedValue).subscribe(\n                  (resp: any) => {\n                    this.updateFieldConfiguration(val.destination, resp);\n                  }, err => {\n                    let staticDdata = [];\n                    staticDdata.push(this.blankDataObj);\n                    staticDdata.push(this.staticData);\n                    this.updateFieldConfiguration(val.destination, staticDdata);\n                  }\n                )\n              }\n            } else {\n              if (changedValue != '') {\n                // Enable all dependent field\n                if (val.dependent && val.dependent.length > 0) {\n                  val.dependent.map(value => {\n                    this.enableField(value);\n                  });\n                }\n                if (val.changeType && val.changeType.length > 0) {\n                  if (val.callApi) {\n                    this.listActions[val.actionDataProvider]().subscribe(\n                      (resp: any) => {\n                        let getResponse = resp.filter(roleInfo => {\n                          return (roleInfo.value.id ? roleInfo.value.id : roleInfo.value) == (changedValue.id ? changedValue.id : changedValue);\n                        });\n                        if (getResponse.length > 0) {\n                          val.changeType.map((changeTypeInfo, changeInfoKey) => {\n                            if (changeTypeInfo.source == getResponse[0].type) {\n                              changeTypeInfo.removeDestination.map(destination => {\n                                this.disableField(destination);\n                                this.deeplyClonedObject.map((fieldVal, fieldKey) => {\n                                  if (fieldVal.name == destination) {\n                                    this.deeplyClonedObject[fieldKey].visibility = false;\n                                  }\n                                });\n                              });\n                              changeTypeInfo.addDestination.map(source => {\n                                this.enableField(source);\n                                this.deeplyClonedObject.map((fieldVal, fieldKey) => {\n                                  if (fieldVal.name == source) {\n                                    this.deeplyClonedObject[fieldKey].visibility = true;\n                                  }\n                                });\n                              });\n                            }\n                          });\n                        }\n                      }\n                    )\n                  } else {\n                    val.changeType.map((changeTypeInfo, changeInfoKey) => {\n                      if (changeTypeInfo.source == changedValue) {\n                        changeTypeInfo.removeDestination.map(destination => {\n                          this.disableField(destination);\n                          this.deeplyClonedObject.map((fieldVal, fieldKey) => {\n                            if (fieldVal.name == destination) {\n                              this.deeplyClonedObject[fieldKey].visibility = false;\n                            }\n                          });\n                        });\n                        changeTypeInfo.addDestination.map(source => {\n                          this.enableField(source);\n                          this.deeplyClonedObject.map((fieldVal, fieldKey) => {\n                            if (fieldVal.name == source) {\n                              this.deeplyClonedObject[fieldKey].visibility = true;\n                            }\n                          });\n                        });\n                      }\n                    });\n                  }\n                }\n              } else {\n                // Disable all dependent field\n                if (val.dependent && val.dependent.length > 0) {\n                  val.dependent.map(value => {\n                    this.disableField(value);\n                  });\n                }\n              }\n            }\n          }\n        )\n      });\n    }\n  }\n  disableField(field: string) {\n    this.form.get(field).disable();\n    return true;\n  }\n  enableField(field: string) {\n    this.form.get(field).enable();\n    return true;\n  }\n  ngOnInit() {\n    this.deeplyClonedObject = JSON.parse(JSON.stringify(this.fields));\n    this.deeplyClonedObject.map((fieldVal, fieldKey) => {\n      if (fieldVal.type == 'select' && fieldVal.options && fieldVal.optionsData == false) {\n        let initialeventObj = {\n          actionDataProvider: `get${fieldVal.name}`,\n          source: fieldVal.name,\n          localstorage: true,\n          destination: fieldVal.name\n        }\n        this.initialEventsObj.push(initialeventObj);\n        if (fieldVal.onChange) {\n          let onChangeObj = {\n            source: fieldVal.name,\n            destination: fieldVal.onChange.destination,\n            actionDataProvider: `get${fieldVal.onChange.destination}`,\n            localstorage: fieldVal.onChange.localstorage,\n            dependent: fieldVal.onChange.dependent,\n            changeType: fieldVal.onChange.changeType ? fieldVal.onChange.changeType : '',\n            callApi: fieldVal.onChange.callApi ? fieldVal.onChange.callApi : false\n          }\n          this.onChangeEventsObj.push(onChangeObj);\n        }\n      }\n    });\n    this.form = this.createControl();\n    this.listActions = this.actionProvider;\n    this.getInitilizedValues();\n    this.onChanges(this.form);\n  }\n\n  updateFieldConfiguration(source, resp) {\n    this.deeplyClonedObject.map((valStatic, keyStatic) => {\n      if (valStatic.name == source) {\n        this.deeplyClonedObject[keyStatic].options = resp;\n      }\n    });\n  }\n\n  get staticData() {\n    return { label: \"Sales User\", value: \"sales_user\" };\n  }\n  get blankDataObj() {\n    return { label: \"Select\", value: \"\" }\n  }\n  getInitilizedValues() {\n    if (this.initialEventsObj.length > 0) {\n      this.initialEventsObj.map((value, key) => {\n        this.ngxService.start();\n        this.listActions[value.actionDataProvider]().subscribe(\n          (resp: any) => {\n            this.updateFieldConfiguration(value.source, resp);\n          }\n        )\n        this.ngxService.stop();\n      }\n      );\n    }\n  }\n\n  onSubmit(event: Event) {\n    event.preventDefault();\n    event.stopPropagation();\n    if (this.form.valid) {\n      this.submit.emit(this.form.value);\n    } else {\n      this.validateAllFormFields(this.form);\n    }\n  }\n\n  createControl() {\n    const group = this.fb.group({});\n    this.deeplyClonedObject.forEach(field => {\n      if (field.type === \"button\") return;\n      const control = this.fb.control(\n        { value: field.value, disabled: field.disabled },\n        this.bindValidations(field.validations || [])\n      );\n      group.addControl(field.name, control);\n    });\n    return group;\n  }\n\n  bindValidations(validations: any) {\n    if (validations.length > 0) {\n      const validList = [];\n      validations.forEach(valid => {\n        validList.push(valid.validator);\n      });\n      return Validators.compose(validList);\n    }\n    return null;\n  }\n\n  validateAllFormFields(formGroup: FormGroup) {\n    Object.keys(formGroup.controls).forEach(field => {\n      const control = formGroup.get(field);\n      control.markAsTouched({ onlySelf: true });\n    });\n  }\n\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport { MatMomentDateModule } from \"@angular/material-moment-adapter\";\r\n\r\nimport {\r\n  MatSortModule, \r\n  MatButtonModule,\r\n  MatCardModule, \r\n  MatDialogModule, \r\n  MatInputModule,\r\n  MatToolbarModule, \r\n  MatMenuModule, \r\n  MatIconModule, \r\n  MatProgressSpinnerModule, \r\n  MatGridListModule, \r\n  MatPaginatorModule,\r\n  MatFormFieldModule,\r\n  MatDividerModule,\r\n  MatTooltipModule,\r\n  MatListModule,\r\n  MatOptionModule,\r\n  MatTabsModule,\r\n  MatButtonToggleModule,\r\n  MatChipsModule,   \r\n  MatExpansionModule,      \r\n  MatRippleModule,    \r\n  MatSidenavModule,\r\n  MatSliderModule\r\n} from '@angular/material'; //MAT_DIALOG_DEFAULT_OPTIONS\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatInputModule,\r\n    MatDialogModule,\r\n    MatTableModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    MatProgressSpinnerModule,\r\n    MatGridListModule,\r\n    MatPaginatorModule,\r\n    MatSelectModule,\r\n    MatSnackBarModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSortModule,\r\n    MatFormFieldModule,\r\n    MatDividerModule,\r\n    MatTooltipModule,\r\n    MatAutocompleteModule,\r\n    MatRadioModule,\r\n    MatMomentDateModule,\r\n    MatListModule,\r\n    MatOptionModule,\r\n    MatTabsModule,\r\n    MatButtonToggleModule,\r\n    MatChipsModule,   \r\n    MatExpansionModule,      \r\n    MatRippleModule,    \r\n    MatSidenavModule,\r\n    MatSliderModule\r\n    //MAT_DIALOG_DEFAULT_OPTIONS\r\n  ],\r\n  exports: [\r\n    CommonModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatInputModule,\r\n    MatDialogModule,\r\n    MatTableModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    MatProgressSpinnerModule,\r\n    MatGridListModule,\r\n    MatPaginatorModule,\r\n    MatSelectModule,\r\n    MatSnackBarModule,\r\n    MatDatepickerModule,\r\n    MatCheckboxModule,\r\n    MatSortModule,\r\n    MatFormFieldModule,\r\n    MatDividerModule,\r\n    MatTooltipModule,\r\n    MatAutocompleteModule,\r\n    MatRadioModule,\r\n    MatMomentDateModule,\r\n    MatListModule,\r\n    MatOptionModule,\r\n    MatTabsModule,\r\n    MatButtonToggleModule,\r\n    MatChipsModule,   \r\n    MatExpansionModule,      \r\n    MatRippleModule,    \r\n    MatSidenavModule,\r\n    MatSliderModule\r\n    //MAT_DIALOG_DEFAULT_OPTIONS\r\n  ],\r\n}) \r\nexport class MaterialModules { }\r\n\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { FieldConfig } from \"../../field.interface\";\r\n@Component({\r\n  selector: \"app-input\",\r\n  template: `\r\n<mat-form-field class=\"demo-full-width\" [formGroup]=\"group\" *ngIf=\"field.visibility\">\r\n<mat-label>{{field.label}}</mat-label>\r\n<input [id]=\"field.name\" matInput [formControlName]=\"field.name\" [placeholder]=\"field.placeHolder\" [type]=\"field.inputType\" [required]=\"field.validations\">\r\n<ng-container *ngFor=\"let validation of field.validations;\" ngProjectAs=\"mat-error\">\r\n<mat-error *ngIf=\"group.get(field.name).hasError(validation.name)\">{{validation.message}}</mat-error>\r\n</ng-container>\r\n</mat-form-field>\r\n`,\r\n  styles: []\r\n})\r\nexport class InputComponent implements OnInit {\r\n  field: FieldConfig;\r\n  group: FormGroup;\r\n  constructor() { }\r\n  ngOnInit() { }\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { FieldConfig } from \"../../field.interface\";\r\n@Component({\r\n  selector: \"app-button\",\r\n  template: `\r\n<div [ngClass]=\"['demo-full-width','margin-top',field.class]\" [formGroup]=\"group\">\r\n<button type=\"submit\" color=\"primary\" class=\"choose_file\">{{field.label}}</button>\r\n</div>\r\n`,\r\n  styles: []\r\n})\r\nexport class ButtonComponent implements OnInit {\r\n  field: FieldConfig;\r\n  group: FormGroup;\r\n  constructor() {}\r\n  ngOnInit() {}\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { FieldConfig } from \"../../field.interface\";\r\n@Component({\r\n  selector: \"app-date\",\r\n  template: `\r\n<mat-form-field class=\"demo-full-width margin-top\" [formGroup]=\"group\" *ngIf=\"field.visibility\">\r\n<mat-label>{{field.label}}</mat-label>\r\n<input matInput [matDatepicker]=\"picker\" [formControlName]=\"field.name\" [placeholder]=\"field.placeHolder\" [required]=\"field.validations\">\r\n<mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n<mat-datepicker #picker></mat-datepicker>\r\n<mat-hint></mat-hint>\r\n<ng-container *ngFor=\"let validation of field.validations;\" ngProjectAs=\"mat-error\">\r\n<mat-error *ngIf=\"group.get(field.name).hasError(validation.name)\">{{validation.message}}</mat-error>\r\n</ng-container>\r\n</mat-form-field>\r\n`,\r\n  styles: []\r\n})\r\nexport class DateComponent implements OnInit {\r\n  field: FieldConfig;\r\n  group: FormGroup;\r\n  constructor() {}\r\n  ngOnInit() {}\r\n}","import { Component, OnInit } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { FieldConfig } from \"../../field.interface\";\r\n@Component({\r\n  selector: \"app-radiobutton\",\r\n  template: `\r\n<div class=\"demo-full-width margin-top\" [formGroup]=\"group\" *ngIf=\"field.visibility\">\r\n<label class=\"radio-label-padding\">{{field.label}}:</label>\r\n<mat-radio-group [formControlName]=\"field.name\">\r\n<mat-radio-button *ngFor=\"let item of field.options\" [value]=\"item\">{{item}}</mat-radio-button>\r\n</mat-radio-group>\r\n</div>\r\n`,\r\n  styles: []\r\n})\r\nexport class RadiobuttonComponent implements OnInit {\r\n  field: FieldConfig;\r\n  group: FormGroup;\r\n  constructor() {}\r\n  ngOnInit() {}\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { FieldConfig } from \"../../field.interface\";\r\n@Component({\r\n  selector: \"app-checkbox\",\r\n  template: `\r\n<div class=\"demo-full-width margin-top\" [formGroup]=\"group\" *ngIf=\"field.visibility\">\r\n<mat-checkbox [formControlName]=\"field.name\">{{field.label}}</mat-checkbox>\r\n</div>\r\n`,\r\n  styles: []\r\n})\r\nexport class CheckboxComponent implements OnInit {\r\n  field: FieldConfig;\r\n  group: FormGroup;\r\n  constructor() {}\r\n  ngOnInit() {}\r\n}\r\n","import {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Directive,\r\n  Input,\r\n  OnInit,\r\n  ViewContainerRef\r\n} from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { FieldConfig } from \"./field.interface\";\r\nimport { InputComponent } from \"./aaf-form-fields/input/input.component\";\r\nimport { ButtonComponent } from \"./aaf-form-fields/button/button.component\";\r\nimport { SelectComponent } from \"./aaf-form-fields/select/select.component\";\r\nimport { DateComponent } from \"./aaf-form-fields/date/date.component\";\r\nimport { RadiobuttonComponent } from \"./aaf-form-fields/radiobutton/radiobutton.component\";\r\nimport { CheckboxComponent } from \"./aaf-form-fields/checkbox/checkbox.component\";\r\n\r\nconst componentMapper = {\r\n  input: InputComponent,\r\n  button: ButtonComponent,\r\n  select: SelectComponent,\r\n  date: DateComponent,\r\n  radiobutton: RadiobuttonComponent,\r\n  checkbox: CheckboxComponent\r\n};\r\n@Directive({\r\n  selector: \"[aafFormField]\"\r\n})\r\nexport class AafFormFieldDirective implements OnInit {\r\n  @Input() field: FieldConfig;\r\n  @Input() group: FormGroup;\r\n  componentRef: any;\r\n  constructor(\r\n    private resolver: ComponentFactoryResolver,\r\n    private container: ViewContainerRef\r\n  ) { }\r\n  ngOnInit() {\r\n    const factory = this.resolver.resolveComponentFactory(\r\n      componentMapper[this.field.type]\r\n    );\r\n    this.componentRef = this.container.createComponent(factory);\r\n    this.componentRef.instance.field = this.field;\r\n    this.componentRef.instance.group = this.group;\r\n  }\r\n  handleChangeEvent(value) {\r\n    console.log(value);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { MaterialModules } from './material.module';\nimport { CommonModule } from '@angular/common';\nimport { AafFormComponent } from './aaf-form.component';\nimport { NgxUiLoaderModule } from 'ngx-ui-loader';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n// components\nimport { InputComponent } from \"./aaf-form-fields/input/input.component\";\nimport { ButtonComponent } from \"./aaf-form-fields/button/button.component\";\nimport { SelectComponent } from \"./aaf-form-fields/select/select.component\";\nimport { DateComponent } from \"./aaf-form-fields/date/date.component\";\nimport { RadiobuttonComponent } from \"./aaf-form-fields/radiobutton/radiobutton.component\";\nimport { CheckboxComponent } from \"./aaf-form-fields/checkbox/checkbox.component\";\nimport { AafFormFieldDirective } from \"./aaf-form-field.directive\";\n\n\n\n@NgModule({\n  declarations: [\n    InputComponent,\n    ButtonComponent,\n    SelectComponent,\n    DateComponent,\n    RadiobuttonComponent,\n    CheckboxComponent,\n    AafFormFieldDirective,\n    AafFormComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MaterialModules,\n    NgxUiLoaderModule\n  ],\n  entryComponents: [\n    InputComponent,\n    ButtonComponent,\n    SelectComponent,\n    DateComponent,\n    RadiobuttonComponent,\n    CheckboxComponent\n  ],\n  exports: [AafFormComponent]\n})\nexport class AafFormModule { }\n"],"names":["defaultFields.createDefaultField"],"mappings":"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"}
